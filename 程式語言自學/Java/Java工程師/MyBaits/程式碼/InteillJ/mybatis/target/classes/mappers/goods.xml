<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--用來描述Goods類中的屬性與資料庫中t_goods Table的映射關係-->
<!--
    namespace存在的意義是因為mappers可能會有很多mapper.xml
    其中每個mapper可能都會有相同的select id 因此要使用namespace做出唯一性

    例如:可能有goods.xml category.xml 這兩個mapper
    且都有selectAll這個id 所以我們需要有namespace做出區隔
    讓mybatis知道，我們要調用哪個namespace的selectAll
-->
<mapper namespace="goods">
    <!--
        id:為SQL查詢語句取一個名稱(別名)，當呼叫此id就是呼叫該SQL查詢語句
        resultType:代表查詢完畢後的資料要包裝成哪個類，例如:使用Goods類保存
    -->
    <select id="selectAll" resultType="com.imooc.mybatis.entity.Goods">
        select * from t_goods order by goods_id desc limit 10
    </select>
    <!--傳參型查詢 透過指定parameterType的數據類型 並使用#{}來標示 調用時要置入的參數-->
    <select id="selectById" parameterType="Integer" resultType="com.imooc.mybatis.entity.Goods">
        select * from t_goods where goods_id=#{value}
    </select>
    <!--
        使用一個Map物件來傳入多個參數
        其中 min max limt 為Map中的key值 調用時會自動獲取該key的value值填入
        所以我們在寫SQL時要寫key而執行時會被替換成value
    -->
    <select id="selectByPriceRange" parameterType="java.util.Map" resultType="com.imooc.mybatis.entity.Goods">
        select * from t_goods
        where current_price between #{min} and #{max}
        order by current_price
        limit 0,#{limt}
    </select>

    <!--
        使用LinkedHashMap當作返回值，返回一個多表查詢後的結果，並且維持表的欄位順序
        返回的每筆資料都是使用key-value表示
        其中key為資料庫中表的欄位，value為欄位的值
    -->
    <select id="selectGoodsMap" resultType="java.util.LinkedHashMap">
        select g.*, c.category_name from t_goods g, t_category c
        where g.category_id=c.category_id
    </select>

    <!--
        設定resultMap
        id:用來唯一標示此物件 通常採用rm+物件
        type:用來表示物件要保存到的類別名稱
    -->
    <resultMap id="rmGoods" type="com.imooc.mybatis.dto.GoodsDTO">
        <!--
            id代表設置主鍵的映射規則
            result代表其他欄位的映射規則

            mybatis的映射規則:將table的欄位(column)內容映射到property中
            其中property是DTO類中的成員，可以是物件或成員
            例如:將goods_id這個欄位的內容 自動存入GoodsDTO裡面Goods類的goods物件中goodsId中
        -->
        <id property="goods.goodsId" column="goods_id"></id>
        <result property="goods.title" column="title"></result>
        <result property="goods.subtitle" column="sub_title"></result>
        <result property="goods.originalCost" column="original_cost"></result>
        <result property="goods.currentPrice" column="current_price"></result>
        <result property="goods.discount" column="discount"></result>
        <result property="goods.isFreeDelivery" column="is_free_delivery"></result>
        <result property="goods.categoryId" column="category_id"></result>
        <result property="categoryName" column="category_name"></result>
    </resultMap>
    <!--使用resultMap指定使用哪個resultMap映射查詢結果到DTO物件上-->
    <select id="selectGoodsDTO" resultMap="rmGoods">
        select g.*, c.category_name from t_goods g, t_category c
        where g.category_id=c.category_id
    </select>
    <!--使用insert插入資料:插入的欄位為t_goods而插入的值為Goods物件的屬性-->
    <insert id="insert" parameterType="com.imooc.mybatis.entity.Goods">
        INSERT INTO t_goods(title,sub_title,original_cost,current_price,discount,is_free_delivery,category_id)
        VALUES (#{title},#{subtitle},#{originalCost},#{currentPrice},#{discount},#{isFreeDelivery},#{categoryId})
        <!--使用selectKey獲取自動增長的主Key值:在執行完insert後執行此SQL 將last_insert_id()回填給Goods物件的goodsId屬性-->
        <selectKey resultType="Integer" keyProperty="goodsId" order="AFTER">
            <!--last_insert_id()為SQL自帶的函數-->
            select last_insert_id()
        </selectKey>
    </insert>

    <!--使用update更新資料:將Goods類的物件內容更新到特定的goods_id號資料上面-->
    <update id="update" parameterType="com.imooc.mybatis.entity.Goods">
        UPDATE t_goods
        SET
            title=#{title},
            sub_title=#{subtitle},
            original_cost=#{originalCost},
            current_price=#{currentPrice},
            discount=#{discount},
            is_free_delivery=#{isFreeDelivery},
            category_id=#{categoryId}
        WHERE
            goods_id=#{goodsId}
    </update>

    <!--使用delete來刪除資料，通常使用主Key當作索引，所以參數類型是整數代表id的值-->
    <delete id="delete" parameterType="Integer">
        delete from t_goods where goods_id =#{value}
    </delete>
</mapper>